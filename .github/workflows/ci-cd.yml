name: CI/CD Pipeline

on:
  push:
    tags:
      - 'v*'  # This triggers the workflow when a tag starting with 'v' is pushed, e.g., v1.0, v2.0, etc.

jobs:
  build:
    runs-on: ubuntu-latest  # Use the latest Ubuntu runner

    steps:
      # Checkout code
      - name: Checkout code
        uses: actions/checkout@v2

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      # Log in to DockerHub using credentials stored in GitHub secrets
      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Build Docker Image
      - name: Build Docker Image
        run: |
          TAG_NAME=$(echo ${{ github.ref }} | sed 's/refs\/tags\///')  # Extract the tag name by removing 'refs/tags/'
          
          # Check if the tag name is empty and exit if true
          if [ -z "$TAG_NAME" ]; then
            echo "Error: Tag name is empty."; exit 1;
          fi

          echo "Building Docker image with tag: $TAG_NAME"  # Debugging: print the tag name
          docker build -t alekyagandem/my-app:$TAG_NAME .  # Build Docker image with the correct tag

      # Push Docker Image to Docker Hub
      - name: Push Docker Image to Docker Hub
        run: |
          TAG_NAME=$(echo ${{ github.ref }} | sed 's/refs\/tags\///')  # Extract the tag name by removing 'refs/tags/'
          docker push alekyagandem/my-app:$TAG_NAME  # Push the Docker image to Docker Hub

      # SSH into EC2 and Deploy the Docker Container
      - name: SSH into EC2 and Deploy
        uses: appleboy/ssh-action@v0.1.0
        with:
          host: ${{ secrets.REMOTE_HOST }}  # EC2 host IP (stored in GitHub Secrets)
          username: ${{ secrets.REMOTE_USER }}  # EC2 username (usually 'ec2-user' or 'ubuntu')
          key: ${{ secrets.REMOTE_SSH_KEY }}  # EC2 private SSH key (stored in GitHub Secrets)
          script: |
            cd /home/ec2-user/my-app  # Navigate to the application directory on EC2
            docker-compose pull  # Pull the latest image from Docker Hub
            docker-compose up -d  # Restart the containers in detached mode

      # Validate Deployment
      - name: Validate Deployment
        run: |
          curl http://${{ secrets.EC2_PUBLIC_IP }}:5000/status  # Check if the app is running.
